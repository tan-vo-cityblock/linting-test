#!/bin/bash
#
# Loads CSV file specified by a GCS path into the designated bigquery
# project:dataset.table, but manually specifies the schema as all
# strings.
#
# This requires the file to be a valid CSV (partners sometimes send us
# things that look like CSVs but aren't).
#
# This is useful for one-off data loads or when exploring a new file
# before writing an import pipeline.

set -eu -o pipefail

if [ $(bq version > /dev/null) ]
then
    echo "Please install gcloud command-line tools." 1>&2
    exit 1
fi

if [ ! $(which xsv) ]
then
    echo "Please install xsv: `brew install xsv`"
    exit 1
fi

if [ $# -ne 6 ]
then
    cat <<EOF
./bq_load_csv <gcs_file_path> <delimiter> <project_id> <destination_project_id> <dataset> <table>

  Loads CSV files specified by a GCS path into the designated bigquery
  project and dataset, but manually specifies the schema as all strings.

- gcs_path               gs:// url for csv
- delimiter              csv delimiter
- project_id             BigQuery project to run the job
- destination_project_id BigQuery project to load data into
- dataset	             BigQuery dataset to load data into
- table		             BigQuery table to load data into

e.g.,
    ./bq_load_csv 'gs://cbh_sftp_drop/emblem/drop/CB_COHORT_MEMBERDEMO_20190814.txt' '|' 'cbh-ben-barg' 'cbh-data-analytics' 'manual' 'CB_COHORT_MEMBERDEMO_20190814'
EOF
    exit 1
fi

file=$1
delimiter=$2
project_id=$3
destination_project_id=$4
dataset=$5
table=$6

headers=$(gsutil cat "$file" | xsv headers -j -d$delimiter)
sanitized_headers=$(echo "$headers" | sed 's/#/_number/g' | sed 's/\//_or_/g' | sed 's/[^0-9a-zA-Z_]/_/g' )
fields=$(for header in $sanitized_headers; do echo $header:STRING; done)
schema=$(echo $fields | tr ' ' ',')

if [ -z $schema ]
then
    echo "Could not build schema for $file. Skipping." 2>&1
    exit 1
fi

command="bq load --project_id=$project_id --source_format=CSV --allow_jagged_rows --field_delimiter='$delimiter' --skip_leading_rows=1 $destination_project_id:$dataset.$table '$file' $schema"
echo $command
eval $command

