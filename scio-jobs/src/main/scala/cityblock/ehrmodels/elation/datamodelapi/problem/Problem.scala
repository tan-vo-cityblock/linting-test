package cityblock.ehrmodels.elation.datamodelapi.problem

import java.time.format.DateTimeFormatter
import java.time.{LocalDate, LocalDateTime}

import cityblock.ehrmodels.elation.service.Elation
import cityblock.ehrmodels.elation.service.auth.AuthData
import cityblock.utilities.SnomedCT
import cityblock.utilities.backend.ApiError
import com.softwaremill.sttp.{Id, SttpBackend}
import com.softwaremill.sttp._
import io.circe.Decoder
import io.circe.generic.semiauto.deriveDecoder

/**
 * Contains all fields of the Problem object available in Elation. This class is meant to be a
 * read-only object for all getRequests made to the Elation server.
 *
 *
 * @param id             Unique ID of the Problem generated by Elation.
 * @param description    Elation does not provide a description per diagnosis so in the case where multiple
 *                       diagnoses exist, the description defaults to the name of the first diagnoisis.
 * @param status         Can be ["Active", "Controlled", "Resolved"].
 * @param synopsis
 * @param start_date     Parsed as java.time.LocalDate
 * @param resolved_date  Parsed as java.time.LocalDate
 * @param dx             List of [[Diagnosis]] objects
 * @param patient        Unique ID of the patient for which problem belongs.
 * @param created_date
 * @param deleted_date
 */
case class Problem(
  id: Long,
  description: Option[String],
  status: SnomedCT.ProblemStatus,
  synopsis: Option[String],
  start_date: Option[LocalDate],
  resolved_date: Option[LocalDate],
  dx: List[Diagnosis],
  patient: Long,
  created_date: Option[LocalDateTime],
  deleted_date: Option[LocalDateTime]
)

object Problem {

  implicit val problemiso8601Decoder: Decoder[LocalDateTime] =
    io.circe.Decoder
      .decodeLocalDateTimeWithFormatter(DateTimeFormatter.ofPattern("uuuu-MM-dd'T'HH:mm:ssX"))

  implicit val problemDecoder: Decoder[Problem] = deriveDecoder[Problem]

  def findAllByPatientId(id: String)(
    implicit backend: SttpBackend[Id, Nothing]): Either[ApiError, List[Problem]] =
    Elation.getAll[Problem](
      uri"https://${AuthData.endpoint}/api/2.0/problems/?limit=50&patient=$id"
    )

}
