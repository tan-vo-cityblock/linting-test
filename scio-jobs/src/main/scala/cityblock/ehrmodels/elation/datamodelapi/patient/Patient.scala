package cityblock.ehrmodels.elation.datamodelapi
package patient

import java.time.format.DateTimeFormatter

import com.softwaremill.sttp._
import java.time.{LocalDate, LocalDateTime}

import cityblock.ehrmodels.elation.service.Elation
import cityblock.ehrmodels.elation.service.auth.AuthData
import cityblock.utilities.backend.{ApiError, CirceError}
import io.circe.{Decoder, Encoder}
import io.circe.generic.semiauto.{deriveDecoder, deriveEncoder}

/**
 * This case class contains all possible fields of the Patient available in Elation. This class is simply meant to use
 * as a read-only object for all getRequests made to the server. In order to post data to the server, reference [[CreatePatient]]
 *
 * @param id        this is the unique ID generated by Elation. This field is Read-Only
 * @param first_name
 * @param middle_name
 * @param last_name
 * @param sex       is either {Male, Female, Unknown}
 * @param dob
 * @param ssn
 * @param race      {"No race specified"
 *                  "American Indian or Alaska Native"
 *                  "Asian"
 *                  "Black or African American"
 *                  "Native Hawaiian or Other Pacific Islander"
 *                  "White"
 *                  "Declined to specify"}
 * @param ethnicity {"No ethnicity specified"
 *                  "Hispanic or Latino"
 *                  "Not Hispanic or Latino"
 *                  "Declined to specify"}
 * @param notes
 * @param address
 * @param phones
 * @param emails
 * @param insurances
 * @param tags
 * @param preference
 * @param emergency_contact
 * @param primary_physician
 * @param primary_care_provider Read-Only
 * @param caregiver_practice
 * @param master_patient
 * @param employer
 * @param metadata
 * @param created_date
 * @param deleted_date
 * @param merged_into_chart
 */
case class Patient(
  id: Long,
  first_name: String,
  middle_name: Option[String],
  last_name: String,
  sex: Enums.Gender.Gender,
  dob: LocalDate,
  ssn: Option[String],
  race: Option[Enums.Race.Race],
  ethnicity: Option[Enums.Ethnicity.Ethnicity],
  notes: Option[String],
  address: Option[Address],
  phones: List[Phone],
  emails: List[Email],
  insurances: List[Insurance],
  tags: List[String],
  preference: Option[Map[String, String]],
  emergency_contact: Option[EmergencyContact],
  primary_physician: Long,
  primary_care_provider: Option[Long],
  caregiver_practice: Long,
  master_patient: Option[Long],
  employer: Option[Employer],
  metadata: Option[Map[String, Option[String]]],
  created_date: LocalDateTime,
  deleted_date: Option[LocalDateTime],
  merged_into_chart: Option[Long]
) extends SubscriptionObject {
  override def getPatientId: Option[String] = Some(this.id.toString)
}

object Patient {
  implicit val patientiso8601Decoder: Decoder[LocalDateTime] =
    io.circe.Decoder.decodeLocalDateTimeWithFormatter(
      DateTimeFormatter.ofPattern("uuuu-MM-dd'T'HH:mm:ssX")
    )

  implicit val patientDecoder: Decoder[Patient] = deriveDecoder[Patient]
  implicit val patientEncoder: Encoder[Patient] = deriveEncoder[Patient]

  val baseUrl = s"https://${AuthData.endpoint}/api/2.0/patients/"

  def findById(
    patientId: String
  )(implicit backend: SttpBackend[Id, Nothing]): Either[ApiError, Patient] =
    Elation.get[Patient](uri"$baseUrl$patientId/")

  def apply(patientJson: io.circe.Json): Either[CirceError, Patient] =
    patientJson.as[Patient] match {
      case Right(elationPatient) => Right(elationPatient)
      case Left(error)           => Left(CirceError(patientJson.toString(), error))
    }
}
